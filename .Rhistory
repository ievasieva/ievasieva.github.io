TTnesa <- esa(TTns, contrad_rows = c(CSA4, 2, 11 ))
TTnesa
Interesan <- minimize(TTnesa, details = TRUE, dir.exp = "0, 0, 0, 0, 0", include="?", row.dom=TRUE, show.cases = TRUE)
Interesan
Parsesan <- minimize(TTnesa, details = TRUE, show.cases = TRUE, include="?", row.dom=TRUE, all.sol = FALSE)
Parsesan
r <- c(8,9,13,20,21,26,38,46,53,55,62,77,85,115,132,133,138,143,152,159,164; 48,93,163,178; 41,124,154; 100,149,169; 56,83,126,129; 37,158;
15,31,51,116,175; 7,10,35,71,76,106,130,174)
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
VPDIF; REVDIFspindif; vpdif; revdifnetwdif; revdifspindif
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NEWTDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NEWTDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
bots<- read_csv("~/Dropbox/1PhD/Articles/Survey Data/bots_clean_small.csv") #MAC
createdata <- function(x) {
bots_full %>%
dplyr::select(grep(x, names(bots_full)))
}
#make a grouping variable - size
bots$size <- class(factor)
bots$size[bots$Q1_4 >= 250] = "Large"
bots$size[bots$Q1_4 < 250] = "Medium"
bots$size[bots$Q1_4 < 50] = "Small"
bots$size[bots$Q1_4 < 10] = "Micro"
bots$size <- factor(bots$size, levels=c("Micro", "Small", "Medium", "Large"))
#make a sector variable (9 - levels)
sectors2<- c(4,2,2,9,5,5,4,5,1,2,4,5,1,5,3,4,4,2,6,5,7,1,6,4,1,6,4,6,6,4,8,5,5,1,3,9,1,1,4,4,7,1,1,9,1,1,5,4,4,4,4,9,9,4,4,3,1,5,9,4,2,3,4,4,5,5,1,4,4,5,4,4,4,4,4,6,1,5,5,4,6,6,4,4,4,6,4,2,1,3,4,1,1,7,4,2,4,7,4,4,6,6,1,5,1,4,2,3,9,9,6,6,4,4,1,9,6,9,1,4,1,2,5,2,5,4,5,6,4,5,5,4,4,4,2,9,2,4,5,3,4,9,7,3,5,4,5,9,4,5,5,6,2,5,4,6,4,4,4,4,5,5,5,4,6,3,7,5,2,4,6,7,4,1,6,5,4,4,5)
bots$sector <- sectors2
bots$sector[bots$sector == 1] = "Architecture & urban planning"
bots$sector[bots$sector == 2] = "Products"
bots$sector[bots$sector == 3] = "Audiovisual services & animation"
bots$sector[bots$sector == 4] = "Graphic, communication & digital design"
bots$sector[bots$sector == 5] = "Advertisement & marketing"
bots$sector[bots$sector == 6] = "Spatial design & interior architecture"
bots$sector[bots$sector == 7] = "Industrial design"
bots$sector[bots$sector == 8] = "Games & design"
bots$sector[bots$sector == 9] = "Mixed creative services & strategy"
bots$sector <- as.factor(bots$sector)
#Adding performance variables
bots$CP <- rowMeans(bots[,c("Q20_CP_1", "Q20_CP_2", "Q20_CP_9", "Q20_CP_10")]) ##Adding creative performance to data frame
bots$BP <- rowMeans(bots[,  c("Q20_BP_1", "Q20_BP_3", "Q20_BP_10")]) ##Adding business performance to data frame
#Grouping variable for performance based on Likert categories
bots$performance <- class(factor)
bots$performance[bots$CP > 4 & bots$BP >4 ] = "Both high"
bots$performance[bots$CP <= 4 & bots$BP <= 4 ] = "Both low"
bots$performance[bots$CP > 4 & bots$BP <= 4 ] = "High creative"
bots$performance[bots$CP <= 4 & bots$BP > 4 ] = "High business"
bots$performance <- factor(bots$performance,
levels=c("Both high", "Both low", "High creative", "High business"))
tibble(bots$sector, bots$performance)
#Grouping variable for performance based on percentiles
Percentile_00  = min(bots$CP)
Percentile_50  = quantile(bots$CP, 0.5)
Percentile_100 = max(bots$CP)
RB = rbind(Percentile_00, Percentile_50, Percentile_100)
dimnames(RB)[[2]] = "Value"
RB
#Code for vizualizing data per groups (e.g. high performing / low performing )
bots[c("Q2_BM1_1", "Q2_BM1_2", "Q2_BM1_3")] <- lapply(bots[c("Q2_BM1_1", "Q2_BM1_2", "Q2_BM1_3")], factor, levels=1:7)
tryout <-as.data.frame(bots[c("Q2_BM1_1", "Q2_BM1_2", "Q2_BM1_3", "performance")])
tryout[1:3] <- lapply(tryout[1:3], factor, levels=1:7)
likt <- likert(tryout[1:3], grouping = tryout$performance)
plot(likt)
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
#
tab <- corstars(fsq[,2:9])
View(bots)
###Correlate performances with objective measures
createdata(Q17)
createdata <- function(x) {
bots %>%
dplyr::select(grep(x, names(bots_full)))
}
createdata <- function(x) {
bots %>%
dplyr::select(grep(x, names(bots_full)))
}
createdata <- function(x) {
bots %>%
dplyr::select(grep(x, names(bots)))
}
###Correlate performances with objective measures
objectiveperformance <- createdata(Q17)
View(bots)
View(bots)
###Correlate performances with objective measures
objectiveperformance <- createdata("Q17")
rbind(objectiveperformance, bots[,("CP", "BP")])
perf <- rbind(objectiveperformance, bots[,("CP", "BP")])
perf <- rbind(objectiveperformance, bots[,("CP","BP")])
View(RB)
createdata <- function(x) {
bots %>%
dplyr::select(grep(x, names(bots)))
}
###Correlate performances with objective measures
objectiveperformance <- as.data.frame(createdata("Q17"))
View(objectiveperformance)
View(objectiveperformance)
perf <- rbind(objectiveperformance, bots[c(("CP","BP")])
perf <- rbind(objectiveperformance, bots[,c("CP","BP")])
perf <- cbind(objectiveperformance, bots[,c("CP","BP")])
cor(perf)
?cor
cor(perf, na.rm = TRUE)
?cor
stats::cor(perf, na.rm = TRUE)
cor(perf, use = "complete")
cor(perf, use = "complete")
cor(perf, use = complete.obs)
cor(perf, use = "complete.obs")
View(perf)
perf <- cbind(objectiveperformance[,c(1:5, 11:13)], bots[,c("CP","BP")])
cor(perf, use = "complete.obs")
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
knitr::kable(
corstars(fsq[,2:9]), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
knitr::kable(
corstars(perf, use = "complete.obs"), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
knitr::kable(
corstars(perf), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
knitr::kable(
corstars(upper), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
knitr::kable(
corstars(upper), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
mcor<-round(cor(perf, use = "complete.obs"),2)
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
knitr::kable(
corstars(upper), booktabs = TRUE,
caption = "Correlation table, all variables (condition)."
)
corstars(perf)
cor(perf, use = "complete.obs") %>% round(2)
tibble(corstars(perf))
x <- corstars(perf)
View(x)
View(x)
View(perf)
View(perf)
ssBAL <- superSubset(fsq2, outcome = "BAL", conditions = c("VPDIF", "SEGM", "NETWDIF", "REVDIF", "SPINDIF"), incl.cut = 0.90, cov.cut = 0.6, relation = "necessity")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; NEWTDIF
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; vpdif; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; NETWDIF
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; vpdif; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; NETWDIF
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; vpdif; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
NETWDIF->vpdif
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; NETWDIF
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; vpdif; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NEWTDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETWDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
NETWDIF->vpdif
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NEWTDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizNOBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SEGM; spindif; vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
revdif; NETWDIF; REVDIF; SPINDIF; segm; netwdif; VPDIF
# several 'edge' statements
SEGM->revdif SEGM->NETWDIF NETWDIF->REVDIF REVDIF->SPINDIF
spindif->segm spindif->netwdif netwdif->VPDIF spindif->revdif
vpdif->NETsDIF
}
")
solvizNOBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizNOBAL.png")
knitr::include_graphics("solvizNOBAL.png")
solvizBAL <- grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
vpdif
node [shape = circle,
fixedsize = true,
width = 1.5] // sets as circles
SEGM; segm; SPINDIF; netwdifREVDIF
# several 'edge' statements
vpdif->segm vpdif->SEGM
segm ->SPINDIF SEGM->netwdifREVDIF
}
")
solvizBAL %>% export_svg %>% charToRaw %>% rsvg %>% png::writePNG("solvizBAL2.png")
knitr::include_graphics("solvizBAL2.png")
