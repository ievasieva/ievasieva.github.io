group_by(CR) %>%
summarise(newBM = mean(NewBM),
CrPerf = mean(CreativePerformance),
BusPerf = mean(BusinessPerformance),
Hours = mean(Hours),
Sales = mean (Sales),
Royalties = mean (Royalties),
Licenses = mean(Licenses),
MarkUp = mean(MarkUp),
NoCure = mean(NoCure)
)
perfandrevmod
a <- c("CR", "VAR", "Value")
valueslow <- as.numeric(perfandrevmod[1, 2:10])
valueshigh <- as.numeric(perfandrevmod[2, 2:10])
low <- rep("low", 9)
high <- rep("high", 9)
VAR <- colnames(perfandrevmod[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
CR <- c(low, high)
barplotdf <- cbind(CR, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 30))
plot <- plot +
(labs(title = "Client Retention x Performance and Use of Revenue Models",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
mypal2 <- c("#80CDC1", "#DE77AE", "#F1B6DA", "#FDE0EF", "#C7EAE5", "#80CDC1", "#35978F", "#01665E")
plot <- plot + scale_fill_manual(values=mypal2)
plot
perfandrevmod <- comdf %>%
group_by(NC) %>%
summarise(newBM = mean(NewBM),
CrPerf = mean(CreativePerformance),
BusPerf = mean(BusinessPerformance),
Hours = mean(Hours),
Sales = mean (Sales),
Royalties = mean (Royalties),
Licenses = mean(Licenses),
MarkUp = mean(MarkUp),
NoCure = mean(NoCure)
)
perfandrevmod
a <- c("NC", "VAR", "Value")
valueslow <- as.numeric(perfandrevmod[1, 2:10])
valueshigh <- as.numeric(perfandrevmod[2, 2:10])
low <- rep("low", 9)
high <- rep("high", 9)
VAR <- colnames(perfandrevmod[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
NC <- c(low, high)
barplotdf <- cbind(NC, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot2 <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$NC, fill=barplotdf$NC)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 30))
plot2 <- plot2 +
(labs(title = "Client Attraction x Performance and Use of Revenue Models",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot2 <- plot2 + labs(fill = "Client Attraction")
plot2 <- plot2 + scale_fill_manual(values=mypal2)
plot2
grid.arrange(plot1, plot2, ncol = 2)
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot, plot2, ncol = 2)
perfandrevmod <- comdf %>%
group_by(CR) %>%
summarise(newBM = mean(NewBM),
CrPerf = mean(CreativePerformance),
BusPerf = mean(BusinessPerformance),
Hours = mean(Hours),
Sales = mean (Sales),
Royalties = mean (Royalties),
Licenses = mean(Licenses),
MarkUp = mean(MarkUp),
NoCure = mean(NoCure)
)
perfandrevmod
a <- c("CR", "VAR", "Value")
valueslow <- as.numeric(perfandrevmod[1, 2:10])
valueshigh <- as.numeric(perfandrevmod[2, 2:10])
low <- rep("low", 9)
high <- rep("high", 9)
VAR <- colnames(perfandrevmod[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
CR <- c(low, high)
barplotdf <- cbind(CR, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 30))
plot <- plot +
(labs(title = "Client Retention x Performance and Use of Revenue Models",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
mypal2 <- c("#80CDC1", "#DE77AE", "#F1B6DA", "#FDE0EF", "#C7EAE5", "#80CDC1", "#35978F", "#01665E")
plot <- plot + scale_fill_manual(values=mypal2)
plot
perfandrevmod <- comdf %>%
group_by(NC) %>%
summarise(newBM = mean(NewBM),
CrPerf = mean(CreativePerformance),
BusPerf = mean(BusinessPerformance),
Hours = mean(Hours),
Sales = mean (Sales),
Royalties = mean (Royalties),
Licenses = mean(Licenses),
MarkUp = mean(MarkUp),
NoCure = mean(NoCure)
)
perfandrevmod
a <- c("NC", "VAR", "Value")
valueslow <- as.numeric(perfandrevmod[1, 2:10])
valueshigh <- as.numeric(perfandrevmod[2, 2:10])
low <- rep("low", 9)
high <- rep("high", 9)
VAR <- colnames(perfandrevmod[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
NC <- c(low, high)
barplotdf <- cbind(NC, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot2 <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$NC, fill=barplotdf$NC)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 30))
plot2 <- plot2 +
(labs(title = "Client Attraction x Performance and Use of Revenue Models",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot2 <- plot2 + labs(fill = "Client Attraction")
plot2 <- plot2 + scale_fill_manual(values=mypal2)
plot2
income<- comdf %>%
group_by(CR) %>%
summarise(OwnActivities = mean(OwnActivities),
Spinouts = mean(Spinouts),
Subsidies = mean(Subsidies),
Loans = mean(Loans),
Investment = mean (Investment)
)
income
a <- c("CR", "VAR", "Value")
valueslow <- as.numeric(income[1, 2:6])
valueshigh <- as.numeric(income[2, 2:6])
low <- rep("low", 5)
high <- rep("high", 5)
VAR <- colnames(income[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
CR <- c(low, high)
barplotdf <- cbind(CR, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge") +
theme(axis.text.x = element_text(angle = 90))
plot <- plot +
(labs(title = "Client Retention x Income Sources",
subtitle = "The comparison of different income sources between firms with high and low client retention capacity",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
plot <- plot + scale_fill_manual(values=mypal2)
plot
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge")
plot <- plot +
(labs(title = "Client Retention x Income Sources",
subtitle = "The comparison of different income sources between firms with high and low client retention capacity",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
plot <- plot + scale_fill_manual(values=mypal2)
plot
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge")
plot <- plot +
(labs(title = "Client Retention x Income Sources",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
plot <- plot + scale_fill_manual(values=mypal2)
plot
income<- comdf %>%
group_by(NC) %>%
summarise(OwnActivities = mean(OwnActivities),
Spinouts = mean(Spinouts),
Subsidies = mean(Subsidies),
Loans = mean(Loans),
Investment = mean (Investment)
)
income
a <- c("NC", "VAR", "Value")
valueslow <- as.numeric(income[1, 2:6])
valueshigh <- as.numeric(income[2, 2:6])
low <- rep("low", 5)
high <- rep("high", 5)
VAR <- colnames(income[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
NC <- c(low, high)
barplotdf <- cbind(NC, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y= barplotdf$Value, group = barplotdf$NC, fill=barplotdf$NC)) +
geom_bar(stat="identity", position="dodge")
plot <- plot +
(labs(title = "Client Attraction x Income Sources",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Attraction")
plot <- plot + scale_fill_manual(values=mypal2)
plot
clients<- comdf %>%
group_by(CR) %>%
summarise(Niche = mean(Niche),
General = mean(General),
B2B = mean(B2B),
B2C = mean(B2C),
B2G = mean(B2G),
CoCreation = mean(CoCreation)
)
clients
a <- c("CR", "VAR", "Value")
valueslow <- as.numeric(clients[1, 2:7])
valueshigh <- as.numeric(clients[2, 2:7])
low <- rep("low", 6)
high <- rep("high", 6)
VAR <- colnames(clients[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
CR <- c(low, high)
barplotdf <- cbind(CR, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$CR, fill=barplotdf$CR)) +
geom_bar(stat="identity", position="dodge")
plot <- plot +
(labs(title = "Client Retention x Client Segments",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Retenion")
plot <- plot + scale_fill_manual(values=mypal2)
plot
clients<- comdf %>%
group_by(NC) %>%
summarise(Niche = mean(Niche),
General = mean(General),
B2B = mean(B2B),
B2C = mean(B2C),
B2G = mean(B2G),
CoCreation = mean(CoCreation)
)
clients
a <- c("NC", "VAR", "Value")
valueslow <- as.numeric(clients[1, 2:7])
valueshigh <- as.numeric(clients[2, 2:7])
low <- rep("low", 6)
high <- rep("high", 6)
VAR <- colnames(clients[-1])
Value <- c(valueslow, valueshigh)
Value <- round(Value, digits = 2)
VAR <- rep(VAR, 2)
NC <- c(low, high)
barplotdf <- cbind(NC, Value, VAR)
barplotdf <- as.data.frame(barplotdf)
plot <- ggplot(barplotdf, aes(x=barplotdf$VAR, y=barplotdf$Value, group = barplotdf$NC, fill=barplotdf$NC)) +
geom_bar(stat="identity", position="dodge")
plot <- plot +
(labs(title = "Client Attraction x Client Segments",
caption = "Source: BOTS Survey UvA 2017/18",
x = "Indicators",
y = "Average Score"))
plot <- plot + labs(fill = "Client Attraction")
plot <- plot + scale_fill_manual(values=mypal2)
plot
library(ggplot2)
library(ggalt)
install.packages("ggalt", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("ggfortify", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(ggalt)
library(ggfortify)
theme_set(theme_classic())
View(bots_full)
View(bots_full)
#Function for creating data frames that contain specific parts
createdata <- function(x) {
bots_full %>%
dplyr::select(grep(x, names(bots_full)))
}
VC <- createdata("VC")
VC <- createdata("V")
VC <- createdata("Q15")
# Compute data with principal components ------------------
df <- VC
pca_mod <- prcomp(df)  # compute principal components
# Data frame of principal components ----------------------
df_pc <- data.frame(pca_mod$x, Species=iris$Species)  # dataframe of principal components
View(pca_mod)
View(pca_mod)
install.packages("twitteR", "ROAuth", "stringr")
library(twitteR)
install.packages("twitteR", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(twitteR)
library(ROAuth)
install.packages("ROAuth", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
reqURL <- 'https://api.twitter.com/oauth/request_token'
accessURL <- 'https://api.twitter.com/oauth/access_token'
authURL <- 'https://api.twitter.com/oauth/authorize'
consumerKey <- 'AO3CuDOcxELsP6tSdqvwCKeYJ' #put the Consumer Key from Twitter Application
consumerSecret <- 'yM2fFRfuUoi7kACddhmyO5tq3UpOkboKyi6em7V0NhHLsKK7HK'  #put the Consumer Secret from Twitter Application
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
download.file(url='http://curl.haxx.se/ca/cacert.pem', destfile='cacert.pem')
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
knitr::include_graphics("Figure1.1.png")
knitr::include_graphics("Figure1.1.png")
knitr::include_graphics("Figure1.2.jpg")
knitr::include_graphics("FigureC2.png", dpi = NA)
#========================
#GETTING THE SURVEY DATA
#========================
bots<- read_csv("~/Dropbox/1PhD/Articles/Survey Data/bots_renamed.csv")
print(as.data.frame(test.simple$valid))
setwd("~/Dropbox/1PhD/Articles/Paper3/Survey Data")
install.packages("install.load")
library(install.load)
pkg <- c("corrr", "readr", "tidyr", "devtools", "dplyr", "plyr", "tidyselect", "e1071", "purrr", "FactoMineR", "psy", "psych", "GPArotation", "tibble", "boot", "ltm", "xtable", "kableExtra", "sem", "lavaan", "irr", "QCA", "SetMethods", "corrplot", "ggpubr", "mclust",
"semTools")
install_load(pkg)
bots<- read_csv("~/Dropbox/1PhD/Articles/Survey Data/bots_renamed.csv")
createdata <- function(x) {
bots %>%
dplyr::select(grep(x, names(bots)))
}
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
#Make a data frame that only includes data for values variables
values <- bots[,grepl("values", names(bots))]
#After the examination, we took out the market value data, since they were highly skewed.
values <- values[,!grepl("Market", names(values))]
#Correlation matrix (lower part)
knitr::kable(corstars(values), booktabs = TRUE,
caption = "Correlation table, all items."
)
#Finding the number of factors
par <- fa.parallel(values) #analysis suggests 3 factors
#CFA using the psych package
test.simple <- fa(r=cor(values, use="complete.obs"), nfactors=3, fm="ml", rotate="oblimin")
fa.diagram(test.simple, cut = .4, digits = 2)
print(as.data.frame(test.simple$loadings))
print(as.data.frame(test.simple$valid))
print(as.data.frame(test.simple$valid, row.names = c("ML1", "ML2", "ML3")))
fa.diagram(ICLUST(values,2,title="Two cluster solution"),main="Input from ICLUST")
require(kableExtra)
require(knitr)
require(dplyr)
surveyvariables<- read.csv("~/Dropbox/1PhD/Articles/Survey Data/surveyquestions.csv")
surveyvariables[,-1] %>%
kable(row.names = F)
require(kableExtra)
require(knitr)
require(dplyr)
surveyvariables<- read.csv("~/Dropbox/1PhD/Articles/Survey Data/surveyquestions.csv")
surveyvariables[,-1] %>%
kable(row.names = F)
?rmarkdown::pandoc_available
rmarkdown::pandoc_available
# List of packages required for this analysis
pkg <- c("corrr", "readr", "tidyr", "devtools", "dplyr", "plyr", "tidyselect", "e1071", "purrr", "psy", "psych", "GPArotation", "tibble", "boot", "ltm", "xtable", "kableExtra", "sem", "lavaan", "irr", "QCA", "SetMethods", "venn", "Hmisc", "janitor", "DiagrammeR", "rsvg", "htmlwidgets", "DiagrammeRsvg")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
# Load the packages into R
library(dplyr)
library(knitr)
library(corrr)
library(xtable)
library(readr)
library(tidyr)
library(devtools)
library(devtools)
library(plyr)
library(e1071)
library(purrr)
library(psy)
library(psych)
library(GPArotation)
library(tibble)
library(boot)
library(ltm)
library(ltm)
library(kableExtra)
library(sem)
library(lavaan)
library(irr)
library(lavaan)
library(irr)
library(QCA)
library(QCA)
library(SetMethods)
library(venn)
library(lavaan)
library(irr)
library(QCA)
library(SetMethods)
library(venn)
library(Hmisc)
library(janitor)
library(Hmisc)
library(janitor)
library(DiagrammeR)
library(rsvg)
library(QCA)
library(SetMethods)
library(venn)
library(Hmisc)
library(janitor)
library(DiagrammeR)
library(rsvg)
library(htmlwidgets)
library(DiagrammeRsvg)
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rticles", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
setwd("~/Documents/ievasieva.github.io")
library("blogdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install_hugo()
serve_site()
serve_site()
serve_site()
setwd("~/Documents/ievasieva.github.io/exampleSite")
serve_site()
serve_site()
setwd("~/Documents/ievasieva.github.io")
serve_site()
new_site(dir = ".", install_hugo = TRUE, format = "toml",
sample = TRUE, theme = "xaviablaza/hugo-lodi-theme", hostname = "github.com",
theme_example = TRUE, serve = interactive())
